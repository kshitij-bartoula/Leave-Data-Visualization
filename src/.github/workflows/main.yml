name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13  # Specify a specific version
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirement_fastAPI.txt

    - name: Wait for PostgreSQL to be ready
      env:
        PGPASSWORD: 12345
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres container..."
          sleep 5
        done

    - name: Run SQL scripts
      env:
        PGPASSWORD: 12345
      run: |
        psql -h localhost -U postgres -d postgres -f src/db/create_tables.sql
        psql -h localhost -U postgres -d postgres -f src/db/insert.sql

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push DockerFastAPI image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dockerfastapi:latest -f DockerFastAPI .
        docker push ${{ secrets.DOCKER_USERNAME }}/dockerfastapi:latest

    - name: Build and push DockerPlotly image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dockerplotly:latest -f DockerPlotly .
        docker push ${{ secrets.DOCKER_USERNAME }}/dockerplotly:latest

    - name: Start Docker containers
      run: |
        docker-compose up -d

    - name: Run tests
      run: |
        # Add your test commands here
        echo "Running tests..."
        # Example: pytest tests/

    - name: Clean up
      run: |
        docker-compose down
        docker system prune -af
